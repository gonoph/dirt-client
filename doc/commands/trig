/trig       Manipulate persistent triggers                                [Perl]

Syntax:
    /trig [-FaDf] [-p <priority>] [-c <chance>] [-n <shots>] [-g <group>] 
        [-L <language>] [-t <regexp>] <name> = <action>
    /trig -d <name>
    /trig -l

Options:
    -F      Fallthrough to allow hooks of lower priority to be executed.
                                                       (default NOT fallthrough)
    -a      Match against the COLORED ((A)NSI) string instead of the uncolored
            string.  You may include variables like ${red} in the matching 
            string.
    -D      Create trigger disabled.  They are enabled when created by default.
    -f      <action> is a function name to execute instead of a dirt command.
    -p      Priority of this hook.                                  (default: 0)
    -c      Chance that this hook will execute.  Should be a floating-point 
            number between 0.0 and 1.0.                           (default: 1.0)
    -n      Execute this hook <shots> times.  If <shots> is 0, the hook will
            never be executed (but it will be defined).  If it is negative,
            the hook will execute forever.                         (default: -1)
    -g      Group name with which this hook should be associated.  Multiple
            groups may be specified by separating them with commas.
    -L      The argument <language> is the name of the language in which the 
            function to be run (-f) is defined.  If -L is specified, -f is 
            assumed.
    -t      Make a trigger hook, argument is the regular expression to match.
    -l      List defined triggers.
    -d      Delete a defined trigger.

Notes:
    /trig allows you to define hooks that are persistent.  Persistent means
    that they will be saved when you exit dirt, and reinstalled when you start
    dirt again.  It is intended for relatively simple triggers that you create
    by typing them in at the command line.  More complex scripts should use
    /hook, and handle installing themselves at startup.

    Triggers use the hook mechanism.  Therefore they will show up when you list
    hooks (/hook -l), and interact with other hooks predictably (because they 
    *are* hooks).  For instance, if your trigger is high priority (-p <large>) 
    and not fallthrough (-F), if will prevent other hooks from being executed
    that might be triggered by the same line of mud output.

    The -l option will only list triggers defined with /trig.  It will not
    list other OUTPUT-type hooks.

Examples:
    

See Also: /hook

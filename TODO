TODO before release:
-----
rename directories: h -> include, o -> .libs
h/String.h -> STL string
h/List.h -> libstdc++
install should ignore CVS/ directories.
Rewrite terminal handling, use TERMIOS
    -> Split screen scrollback
    -> /window, /exec interface
    -> Handle SIGWINCH
    -> Use multiple input lines/status bar (multiple line status bar)
    -> Replace all TTY stuff with ncurses stuff (man ncurses)
Repeat -> C++, with inverse last command a la zmud.
Commands -> static autocomplete
Perl eval: %
Evaluating commands ('/') in send
Each of the keys in InputLine.cc, InputLine::keypress must be turned into a 
    HookStub (subclass HookStub for keypress events? -- make it a friend of
    InputLine so it can manipulate input_buf, etc)  I left perl hook_run there
    for now.
Actions must be rewritten.  See Session.cc:674, Session::triggerCheck.
finish removing one_argument, convert to OptionParser.
Write Variables class, test it with small perl/C++ program.
Make all keys in InputLine.cc be KEYPRESS hooks.
/debug command to turn on debugging.  For instance, print which hook catches
    a line of output.  See Hook.cc:199 (Hook::run).
    Also, print ${color_code} rather than colors, so people can write regexes that match.
#ifndef BLAH_H protect all header files.
Uniform way of handling errors.  report() and error() should be used in the code,
    and configurable so that they are printed to the screen (w/attribs?) or displayed
    in the status bar.
/config command to handle what used to be /disable and /enable.
Error when 'sudo su - bob' and then run dirt (tty permissions)
Config.cc needs to be rewritten
Keys in Hotkey.cc, should be rewritten as individual hooks.
Remove restart via alt-t?  Seems such a kludge.
Chat subcommands in Chat.cc: handleUserCommand should all be hooks.
Where did this message come from: @@ Dumping %Config to file
    when running dirt as 'bob'?
Where does this message come from: read -1 bytes from socket 8, errno: (0)...
    when running more than one copy of dirt on the same machine.
    Seems that the second copy read()'s in a loop, spamming the CPU.
Commands to easily open a connection to a new mud, add a new mud, etc.
Editing hooks/aliases/triggers could simply copy the /trig (etc) line to the command line.
    for instance, when you hit 'e' from the window listing all triggers.
Change Session.cc so there are less string copies (triggerCheck, in particular)
    merge triggerCheck() with inputReady?
Retromud prompts are not grabbed.  Does retromud use Telnet GA?
    prompt seems to work for Abandoned Reality, but prompt is not removed from mud output.
*^H style prompts.
Titles, top/bottom messages for windows.
after a /clear, text appears at *bottom* of a window.
Window is not painted in background color -- tab, end of lines are unpainted. (when scrolling)
Use hash_map to store Windows by name for fast access (keypress hook)
Option to 'croak()' on perl errors?
When output is redirected to a file, screen (even more) badly corrupted.  Could be an indicator
    of which drawing routines are depending on tty, and which ones are using "print".
Write Python exception handler a la SIG{__WARN__} in perl.
Rearrange StackedInterpreter, so everything doesn't fail...what to do if both interpreters
    define a given function?  What to do if only one does?
/eval for python doesn't return values:     /eval -rLpython 1+2
Make sure in all circumstances, only ONE embedded interpreter attempts to run a command
    (re: /hook -f tries both...)
/hook -t"^(.*)$" -TOUTPUT -F printuncolored = /eval print "\$1\n";
    generates an error, as more output is received, dirt starts disabling *other* hooks,
    but not this one!
Perl warnings from hooks should print the hook name.
    /hook -t"^(.*)$" -TOUTPUT -F printuncolored = /eval print "$asdfasdf\n";
/eval -- print $Trigger::Triggers{'zsays'}->{'t'}
    doesn't work...
Key: alt-n, alt-p for next, previous match (alt-/)
Is ProxyWindow used at all?  (remove it)
Lines that wrap are missing the first character on the wrapped line.
Auto-hook disabler seems to disable the next hook run after an error (which is not always 
    the same hook!)  i.e. make a bad /trig and then type something -- it will disable tab_complete.
Consider a "gag" attribute: will still allow all hooks to match (and modify!) the line,
    but when it gets to the end, it will not be written to the screen.
Error parsing init script (i.e. trigger.pl) causes obscure error with no backtrace.
    error in parsing gag.pl generated NO message AT ALL.
Killing help window causes help to misbehave.  Check for window and recreate it if necessary?
/delay, /repeat, or /run command that will let me schedule something to be sent.
Should Window::focused be static?
/input, /inputline like command to set input line.
Aliases don't work at all...
xterm doesn't send alt- key sequences properly...
/gag -Ft'^\\s*$' blankline
    doesn't work...because the string to be matched is "", and when it is gagged it is
    replaced with "" -- and dirt detects that they are the same.  Need another way to do
    gagging since "" is a valid mud output line.  (after crlf stripped -- maybe leave in
    crlf for triggers?)
    See Session.cc:693 (Session::triggerCheck)
Try to initiate a ytalk with the dirt terminal...hang? no...just fucks up the screen.
    Turn mesg n on dirt startup...
Make a perl class to do a scrollable text box (/help) and one to do a selection 
    list box (/alias, /trig, /gag, etc)
Add options to /group to do most /hook operations, on the WHOLE GROUP.
    Do the same with hook?  If no =, then try to change the attributes of a hook?
Focus mechanism:
    Keypresses which go with a "focused" window should grab higher priority when active.
    Should not be able to pull up command history while in scrollback
    Keypresses for modal windows (/help) should have higher priority than 
        background keys (scrollback)
    What about /help, history combo?  Who should get up/dn pgup/pgdn?
        help should trap up/dn to prevent history from popping up.
Option to use favorite language for /echo?  (i.e. /echo -> /eval print
    "<args>\n" so variable expansions work)
Saved.pl should not be clobbered if it has been modified since last loading.
/alias crap = crap $2 $1
    hangs dirt.
Aliases are getting evaluated in the wrong order:
    @ life-forest    .eejjnnw                                     0                                        
    @ life-magic     life-forest;portal                           0                                        
    life-magic executes "portal" first!
    life-forest;portal has same problem...
    .eejjnnw;portal does not...
Hooks without a matcher will not have RHS expanded as a quoted string.  Is this bad?

Hook:
-----
Why doesn't old grab_prompt work?  (no while loop -- i.e. recursive grabbing)
Inconsistency: perl stuff gets executed *after* the received buffer is printed,
    C++ stuff gets executed *before*.
fallthrough with perl functions doesn't actually work since we don't collect
    the return value -- we don't know if it was caught.  See TriggerHookStub::operator()
    FIXME CHECK THIS!!
KEYPRESS hooks: key is an int.  Convert it to a string (itoa) and pass it to hooks?
    /complete hook needs input line to do its thing (when tab is pressed).
    if -t is specified, checks for key and passes input line.
    if -t NOT specified, just passes key.
-- or --
    -k parameter to /hook: implies -T KEYPRESS.  If specified, key must match.  Input
    line will be passed to hookstub.   (Need KeypressHookStub class)

    Keypresses should be associated with a window.  How to do that?  /hook -W?
    put list of keys on window's status bar?  How about keys for open/alias/trig
    windows?
Should print every line received: /hook -T OUTPUT -F tester = /eval print "got: $_"
    how to do this?

Scripts:
--------
convert:
    auto/gag
        alt-g to bring up gags?
    auto/highlight
        alt-h to bring up highlights?
    auto/mudftp
        Converted, needs to be tested.
    auto/repeat
        bind KEYPRESS to clear line and place new text on command line.  Inverse last command.
    auto/trigger
        '/trig -e' to edit a trigger (copy it to the command line)
        Add '/trig -r' to run a named trigger.
        make alt-t bring up window with triggers in it. Pressing enter on one
        should copy it to the command line for modification.
    sys/idle
    sys/keys
Continue converting commands in Interpreter.cc
Message if command not found...
Action -> /trig, 
Subst -> /trig, check that parenthesis/$n backtracing works.
Alias -> /alias, alt-a should bring up list of aliases.
/help, alt-h should bring up help window.  bind pgup/pgdn to help window.
tell, soul, chatline, etc. windows.

Window:
-------
scroll down a line
scroll up a line
scroll down a page
scroll up a page
write message on top bar
write message on bottom bar
Do all this with /status?  Extend /window?
list bound keys on status line (right justified).

Screen:
-------
Ncurses seems well suited to all this.
Screen.cc, Window.cc use memset on canvas to draw to screen, Screen::refresh redraws.
curses has panel (info panel) to do overlapping windows. (info curses)
    stdscr is below all panels (for mud output)

Window::popup() is completely fucked.
    And by extension, Window::insert(), Window::remove().
    this was removed from /window -s and /window -i...

Screen corruption under xterm...

install should ignore CVS/ directories.

rename directories: h -> include, o -> .libs, samples -> scripts

Replace List with hash_map for:
    Actions (MUD.h)
    Macros (MUD.h)
    Hooks (not yet written)

Write Hook class

Remove List entirely

Replace h/String.h with STL string

Event class: parent of Action, Macro, Hook:
    has priority, group, enable/disable, mud this event belongs to
    method to check whether event is activated (checking group enable/disables, and enable/disable)

Serialize event objects (children), and dump them to files for persistence.

Arguments to /run: PerlEmbeddedInterpreter::run


TODO before release:
-----
List.h -> libstdc++
Rewrite terminal handling, use TERMIOS
    -> Split screen scrollback
    -> /window, /exec interface
    -> Handle SIGWINCH
    -> Use multiple input lines/status bar (multiple line status bar)
    -> Replace all TTY stuff with ncurses stuff (man ncurses)
Repeat -> C++, with inverse last command a la zmud.
Commands -> static autocomplete
Perl eval: %
Evaluating commands ('/') in send
Change name: crud?
Each of the keys in InputLine.cc, InputLine::keypress must be turned into a 
    HookStub (subclass HookStub for keypress events? -- make it a friend of
    InputLine so it can manipulate input_buf, etc)  I left perl hook_run there
    for now.
Actions must be rewritten.  See Session.cc:674, Session::triggerCheck.
(fixed?)Dirt consumes 100% CPU.  (read on socket(8), read -1 bytes on socket, errno=0 (EOF), read on pipe...)
    I'm pretty sure this is the chat server socket.  It's set for non-blocking 
    IO, so select() always returns even when it's not connected and there's no data.
2) Rewrite all /commands to use the new Hook system.
/disable, /enable need to be totally rewritten.
3) Get hooks working from perl.
remove one_argument, convert to OptionParser.
String -> string
List -> vector
Write Variables class, test it with small perl/C++ program.
Make all keys in InputLine.cc be KEYPRESS hooks.
/debug command to turn on debugging.  For instance, print which hook catches
    a line of output.  See Hook.cc:199 (Hook::run).
    Also, print ${color_code} rather than colors, so people can write regexes that match.
#ifndef BLAH_H protect all header files.
Uniform way of handling errors.  report() and error() should be used in the code,
    and configurable so that they are printed to the screen (w/attribs?) or displayed
    in the status bar.
/config command to handle what used to be /disable and /enable.
Error when 'sudo su - bob' and then run dirt (tty permissions)
Config.cc needs to be rewritten
Keys in Hotkey.cc, should be rewritten as individual hooks.
Remove restart via alt-t?  Seems such a kludge.
Chat subcommands in Chat.cc: handleUserCommand should all be hooks.
Where did this message come from: @@ Dumping %Config to file
    when running dirt as 'bob'?
Where does this message come from: read -1 bytes from socket 8, errno: (0)...
    when running more than one copy of dirt on the same machine.
    Seems that the second copy read()'s in a loop, spamming the CPU.
Commands to easily open a connection to a new mud, add a new mud, etc.
Editing hooks/aliases/triggers could simply copy the /trig (etc) line to the command line.
    for instance, when you hit 'e' from the window listing all triggers.
Change Session.cc so there are less string copies (triggerCheck, in particular)
    merge triggerCheck() with inputReady?
Retromud prompts are not grabbed.  Does retromud use Telnet GA?
    prompt seems to work for Abandoned Reality, but prompt is not removed from mud output.
*^H style prompts.
Titles, top/bottom messages for windows.
after a /clear, text appears at *bottom* of a window.
Window is not painted in background color -- tab, end of lines are unpainted. (when scrolling)
Use hash_map to store Windows by name for fast access (keypress hook)
Option to 'croak()' on perl errors?
When output is redirected to a file, screen (even more) badly corrupted.  Could be an indicator
    of which drawing routines are depending on tty, and which ones are using "print".
Write Python exception handler a la SIG{__WARN__} in perl.
Rearrange StackedInterpreter, so everything doesn't fail...what to do if both interpreters
    define a given function?  What to do if only one does?
Implement -L (language) option for /hook.  How to do this in TriggerHookStub::operator()?
    argument to EmbeddedInterpreter::run specifying language?
    Why not do this: /hook ... = /run blah  (because /run gets put on interpreter stack
    and by the time the interpreter gets to it, the data in $_ may be lost.
/eval for python doesn't return values:     /eval -rLpython 1+2
Make sure in all circumstances, only ONE embedded interpreter attempts to run a command
    (re: /hook -f tries both...)
/hook -t"^(.*)$" -TOUTPUT -F printuncolored = /eval print "\$1\n";
    generates an error, as more output is received, dirt starts disabling *other* hooks,
    but not this one!
Perl warnings from hooks should print the hook name.
    /hook -t"^(.*)$" -TOUTPUT -F printuncolored = /eval print "$asdfasdf\n";
/eval -- print $Trigger::Triggers{'zsays'}->{'t'}
    doesn't work...
Removing extra \n at beginning of OutputWindow::printVersion clears up initial corruption.
    Add it back for testing.  Could a pair of consecutive \n's be the problem?
    Note: /echo "" does not cause screen to scroll. (until more output is received).
/echo prints: "/echo"
Key: alt-n, alt-p for next, previous match (alt-/)
Commenting out block on Screen.cc:265 seems to fix screen corruption.
Is ProxyWindow used at all?  (remove it)
Crash in Window::~Window when deleting w. (why? does this manifest itself with other windows?)
Lines that wrap are missing the first character on the wrapped line.
Escaping in regexes is broken:
    /trig -F -t'\*' star = /echo found a star!          gives an error

Hook:
-----
Why doesn't old grab_prompt work?  (no while loop -- i.e. recursive grabbing)
Inconsistency: perl stuff gets executed *after* the received buffer is printed,
    C++ stuff gets executed *before*.
fallthrough with perl functions doesn't actually work since we don't collect
    the return value -- we don't know if it was caught.  See TriggerHookStub::operator()
    FIXME CHECK THIS!!
KEYPRESS hooks: key is an int.  Convert it to a string (itoa) and pass it to hooks?
    /complete hook needs input line to do its thing (when tab is pressed).
    if -t is specified, checks for key and passes input line.
    if -t NOT specified, just passes key.
-- or --
    -k parameter to /hook: implies -T KEYPRESS.  If specified, key must match.  Input
    line will be passed to hookstub.   (Need KeypressHookStub class)

    Keypresses should be associated with a window.  How to do that?  /hook -W?
    put list of keys on window's status bar?  How about keys for open/alias/trig
    windows?
Should print every line received: /hook -T OUTPUT -F tester = /eval print "got: $_"
    how to do this?

Scripts:
--------
convert:
    auto/gag
        alt-g to bring up gags?
    auto/highlight
    auto/mudftp
    auto/repeat
        bind KEYPRESS to clear line and place new text on command line.  Inverse last command.
    auto/trigger
        rewrite, '/trig -e' to edit a trigger (copy it to the command line)
        Needs to retreive enabled/disabled state from client, so that it can be
        saved persistently.  (Can always overload /enable and /disable with -F)
        Add '/trig -r' to run a named trigger.
    sys/color
    sys/config
    sys/functions
    sys/idle
    sys/init
    sys/keys
rename samples -> scripts
Continue converting commands in Interpreter.cc
Message if command not found...
Check/remove List and String
Escaped stuff:
    Things that need to be escaped: [.;\$|]
        ;   command separator                                   (configurable)
        .   speedwalk character (only at beginning of command)  (configurable)
        \   escaped backslash                                   (configurable?)
        $   variables (assuming Vars package is completed, integrated with Perl/Python)
        |   pipe (assuming pipe command is written)
    In general, assume a package needs a "special" character.  When parsing, check
    that it is not preceeded by an odd number of escapes.  If so, ignore it, if not,
    parse as usual.  Before sending commands to the mud, they should be unescaped:  
    any escaped character left should be replaced with its counterpart (including 
    the escape character).  => 'unescape' hook (or part of writeMUD?)
Action -> /trig, make alt-t bring up window with triggers in it.  Pressing
    enter on one should copy it to the command line for modification.
Subst -> /trig, check that parenthesis/$n backtracing works.
Alias -> /alias, alt-a should bring up list of aliases.
/help, alt-h should bring up help window.  bind pgup/pgdn to help window.
tell, soul, chatline, etc. windows.

Window:
-------
scroll down a line
scroll up a line
scroll down a page
scroll up a page
write message on top bar
write message on bottom bar
Do all this with /status?  Extend /window?
list bound keys on status line (right justified).
